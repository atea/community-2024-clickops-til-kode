name: 'Deploy Azure Landing Zones'

on:
  pull_request:
    branches:
      - main
    paths:
      - infra/azure-landing-zones/**
      - infra/subscription-vending-machine/**

  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy:
    name: 'Deploy Azure Landing Zones'
    runs-on: ubuntu-latest
    environment: demo

    steps:
      - name: Checkout repository from GitHub
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        id: init
        run: terraform init -backend=false

      - name: Verify that code has valid syntax
        id: validate
        run: terraform validate -no-color

      - name: Verify that code is formatted
        id: fmt
        run: terraform fmt -check -no-color

      - name: Update pull request with information
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'

        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }